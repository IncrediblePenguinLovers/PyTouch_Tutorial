# 신경망 모델 구성하기

# pytorch 의 모든 모듈은 nn.Module 의 하위 클래스 subclass 이다

import os
import torch
import torch as nn
import torch.nn as nn # 클래스 정의하기를 진행하다가 오류가 발생했는데, 튜토리얼에는 표시가 되어 있지 않지만 이것을 해줘야 nn.Module 상속이 가능하다.
from torch.utils.data import DataLoader
from torchvision import datasets, transforms

# 학습을 위한 장치 얻기

device = (
        "cuda"
        if torch.cuda.is_available()
        else "mps"
        if torch.backends.mps.is_available()
        else "cpu"
)
print(f"Using {device} devise")

# 클래스 정의하기

class NeuralNetwork(nn.Module):
    
    def __init__(self):
        super().__init__()
        self.flatten = nn.Flatten()
        self.linear_relu_stack = nn.Sequential(
            nn.Linear(28*28, 512),
            nn.ReLU(),
            nn.Linear(512, 512),
            nn.ReLU(),
            nn.Linear(512, 10),
        )
        
    def forward(self, x):
        x = self.flatten(x)
        logits = self.linear_relu_stack(x)
        return logits
    
model  = NeuralNetwork().to(device)
print(model)

X = torch.rand(1, 28, 28, device = device)
logits = model(X)
pred_probab = nn.Softmax(dim=1)(logits)
y_pred = pred_probab.argmax(1)
print(f"Predicted class: {y_pred}")

model  = NeuralNetwork().to(device)
print(model)

X = torch.rand(1, 28, 28, device = device)
logits = model(X)
pred_probab = nn.Softmax(dim=1)(logits)
y_pred = pred_probab.argmax(1)
print(f"Predicted class: {y_pred}")

# nn.Flatten

flatten = nn.Flatten()
flat_image = flatten(input_image)
print(flat_image.size()) # 출력되는 flat_image 는 도대체 무엇을 의미하는 것일까 ?

# nn.Linear

layer1 = nn.Linear(28*28, 20)
hidden1 = layer1(flat_image)
print(hidden1.size())

# nn. ReLU

print(f"Before ReLU: {hidden1}\n\n")
hidden1 = nn.ReLU()(hidden1)
print(f"After ReLU: {hidden1}")

# nn.Sequential

seq_modules = nn.Sequential(
    flatten,
    layer1,
    nn.ReLU(),
    nn.Linear(20, 10)
)

input_image = torch.rand(3, 28, 28)
logits = seq_modules(input_image)

# 모델 매개변수

print(f"Model structure: {model}\n\n")

for name, param in model.named_parameters():
    print(f"Layer: {name} | Size: {param.size()} | Values : {param[:2]} \n")
    
